{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","filter","item","getWinningMovesForVelocity","xPosition","yPosition","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","dex","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","this","rowViews","row","columnViews","column","piece","onClick","style","width","height","backgroundColor","display","padding","cursor","borderRadius","flex","border","undefined","flexDirection","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","props","Object","assign","container","styles","renderBoard","React","Component","aligenItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23ca7824.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nexport default class App extends React.Component{\n\nstate={\n   rows:6,\n   columns:7,\n   moves: [ ],\n   playerTurn:'red',\n};\nresetBoard =() => {\n  this.setState({moves:[],winner:null })\n}\ngetPiece=(x,y)=> {\n  const list =this.state.moves.filter((item)=>{ \n    return(item.x===x && item.y === y); \n  });\n  return list[0]; \n}\ngetWinningMovesForVelocity=(xPosition,yPosition,xVelocity,yVelocity) => {\n  const winningMoves =[{x: xPosition, y:yPosition}];\n  const player = this.getPiece(xPosition,yPosition).player;\n\n  for (let delta=1; delta<=3; delta +=1){\n    const checkX=xPosition+xVelocity*delta;\n    const checkY=yPosition+yVelocity*delta;\n\n    const checkPiece= this.getPiece(checkX,checkY);\n   if(checkPiece && checkPiece.player === player){\n     winningMoves.push({x: checkX,y:checkY });\n   }\n   else{\n     break; \n   }\n }\n for (let delta=-1; delta>= -3; delta -=1){\n  const checkX=xPosition+xVelocity*delta;\n  const checkY=yPosition+yVelocity*delta;\n  \n  const checkPiece= this.getPiece(checkX,checkY);\n if(checkPiece && checkPiece.player=== player){\n   winningMoves.push({x: checkX,y:checkY });\n }\n else{\n   break; \n }\n}\nreturn winningMoves;\n}\ncheckForWin = (x, y,player) => {\n const velocities= [{x:1,y:0},{x:0,y:1},{x:-1,y:1},{x:1,y:1}];\n for(let dex=0; dex<velocities.length; dex++){\n   const element = velocities[dex];\n   const winningMoves= this.getWinningMovesForVelocity(x,y,element.x,element.y);\n   if(winningMoves.length>3){\n     this.setState({winner: this.getPiece(x,y).player,winningMoves});\n   }\n }\n}\naddMove =(x,y)=> {\n  const {playerTurn}=this.state;\n  const nextPlayerTurn=playerTurn === 'red' ? 'yellow' : 'red';\n  //check for a win based on this nextmove\n  let availableYPosition=null;\n  for(let position= this.state.rows - 1; position >= 0; position--){\n    if(!this.getPiece(x,position)){\n      availableYPosition = position;\n      break;  \n    }\n  }\n  if(availableYPosition !== null){\n  this.setState({moves: this.state.moves.concat({x,y: availableYPosition,player:playerTurn}),playerTurn: nextPlayerTurn},()=>this.checkForWin(x,availableYPosition,playerTurn));\n  }\n  //whenever you click it it will add the state and it will change player turn to the nextplayer.\n}\n  renderBoard(){\n    const{rows,columns,winner}= this.state;\n    const rowViews=[];\n    for(let row=0; row<this.state.rows;row +=1 ){\n      const columnViews=[];\n      for(let column=0;column<this.state.columns;column+=1){\n        const piece = this.getPiece(column,row);\n        columnViews.push(\n        <div onClick={()=> {this.addMove(column,row)}} style={{width:'5vw', height:'5vw', backgroundColor:'#00a8ff',display:'flex',padding:5, cursor:'pointer' }}>\n        <div style={{borderRadius:'50%',backgroundColor:'white',flex:1, display: 'flex'}}>\n        {piece ? <div style={{backgroundColor: piece.player,flex:1, borderRadius:'50%',border: '1px solid #333' }}/>: undefined}\n        </div>\n        </div> \n        )\n      }\nrowViews.push(<div style={{display:'flex', flexDirection: 'row'}}>{columnViews}</div>);\n    }\n    return(\n      <div style={{backgroundColor: 'red', display:'flex', flexDirection: 'column' }}>\n        {winner && <div onClick={ this.resetBoard} style={{position:'absolute',left:0,right:0,bottom:0,top:0,zIndex:3,backgroundColor:' rgba(0,100,0, .5)',\n        display:'flex',justifyContent:'center',alignItems:'center,',color:'#fff',fontWeight:'10000',fontSize:'8vw'}}>{`${winner} WINS!!`}</div>}\n          {rowViews}\n      </div>\n    )\n  }\n  render(){\n    const{style}= this.props;\n     return (\n     < div style={ style ? Object.assign({},style.container, style): styles.container}>\n       <div>\n       {this.renderBoard()} \n       </div>\n       </div>\n     ); \n     }\n  }\n  const styles ={\n    container: {\n      height: '100%',\n      padding: 5,\n      display: 'flex',\n      justifyContent: 'center',\n      aligenItems: 'center'\n    }\n  };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}